#!/usr/bin/env ruby

require 'rubygems'
require 'optparse'

require "kivot/pivotal_poster"
require 'kivot/config_file_reader'

def read_from_config_file(filename)
  Kivot::ConfigFileReader.read_from_config_file(filename, Pathname.getwd)
end

options = {}
option_parser = OptionParser.new do |opts|
  opts.on("-t", "--token TOKEN",
          "Use the Pivotal Tracker API token TOKEN") do |token|
    options[:token] = token
  end

  opts.on("-p", "--project_id ID",
          "Add stories to the project identified by ID") do |project_id|
    options[:project_id] = project_id
  end

  opts.on("-o", "--owner OWNER_NAME",
          "Set the owner of the new story to OWNER_NAME") do |owner_name|
    options[:owner] = owner_name
  end

  opts.on("-r", "--requester REQUESTER_NAME",
          "Set the requester of the new story to REQUESTER_NAME") do |requester_name|
    options[:requester] = requester_name
  end

  opts.banner =<<-END_OF_BANNER
Usage: kivot [options] NAME [DESCRIPTION]
  You must specify your Pivotal Tracker API token and project ID, using either 
  the -t and -p options, or the .kivot_token and .kivot_project_id files.

  kivot will look for those files in the current directory, then parent 
  directories, then your home directory.
  END_OF_BANNER
end
option_parser.parse!

name = ARGV[0]
description = ARGV[1]

token = options.delete(:token) || read_from_config_file('.kivot_token')
project_id = options.delete(:project_id) || read_from_config_file('.kivot_project_id')

unless name && token && project_id
  puts option_parser.banner
  exit(1)
end

poster_options = {
  :description => description
}.merge(options)

poster = Kivot::PivotalPoster.new(token, project_id)
poster.post_story(name, poster_options)
